import openai
import logging
import json
import re
import os
from dotenv import load_dotenv
from openai import OpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)
client = OpenAI()

# ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ .env
ASSISTANT_ID = os.getenv("OPENAI_ASSISTANT_ID")

if not ASSISTANT_ID:
    raise ValueError("‚ùó –ù–µ —É–∫–∞–∑–∞–Ω OPENAI_ASSISTANT_ID –≤ .env")

# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
QUESTION_PATTERN = re.compile(
    r"–ß—Ç–æ( –∏–º–µ–Ω–Ω–æ)? —Å–ª–µ–¥—É–µ—Ç —Å–¥–µ–ª–∞—Ç—å [^,]+, —á—Ç–æ–±—ã (–ø–µ—Ä–µ–π—Ç–∏ –æ—Ç [^ ]+ –∫ [^ ]+|–ø–æ–Ω—è—Ç—å [^?]+)\??", re.IGNORECASE
)

def validate_key_question_format(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á–µ–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–æ–º—É –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.
    """
    if not text:
        return False
    return bool(QUESTION_PATTERN.search(text.strip()))

def try_extract_json(text: str):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ GPT.
    """
    try:
        return json.loads(text)
    except json.JSONDecodeError:
        match = re.search(r'{.*}', text, re.DOTALL)
        if match:
            try:
                return json.loads(match.group())
            except json.JSONDecodeError:
                logger.warning("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–π JSON-–±–ª–æ–∫")
    logger.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å.")
    return {"analysis": text, "key_question": "", "field_comments": {}}

def ask_gpt_with_validation(problem_data: dict) -> dict:
    logger.debug("üßº –°—Ç–∞—Ä—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")

    message = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–º—É –º—ã—à–ª–µ–Ω–∏—é. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–ª—é—á–µ–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —à–∞–±–ª–æ–Ω—É ¬´–ß—Ç–æ —Å–ª–µ–¥—É–µ—Ç —Å–¥–µ–ª–∞—Ç—å X, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç R1 –∫ R2?¬ª –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ 7 —à–∞–±–ª–æ–Ω–æ–≤ –ë–∞—Ä–±–∞—Ä—ã –ú–∏–Ω—Ç–æ.

–í–æ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

–ö—Ç–æ: {problem_data.get('who')}
–ß—Ç–æ: {problem_data.get('what')}
–ì–¥–µ: {problem_data.get('where')}
–ö–æ–≥–¥–∞: {problem_data.get('when')}
–ü–æ—á–µ–º—É —Å–µ–π—á–∞—Å: {problem_data.get('why_now')}
R1: {problem_data.get('r1_as_is')}
R2: {problem_data.get('r2_to_be')}
Gap: {problem_data.get('gap')}
–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {problem_data.get('problem_type')}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–π —Å—Ö–µ–º–µ:
{{
  "analysis": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ R1, R2, GAP",
  "key_question": "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á–µ–≤–æ–π –≤–æ–ø—Ä–æ—Å",
  "field_comments": {{
    "who": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–ª—é '–ö—Ç–æ', –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ",
    "what": "...",
    "where": "...",
    "when": "...",
    "why_now": "...",
    "r1_as_is": "...",
    "r2_to_be": "...",
    "gap": "...",
    "problem_type": "..."
  }}
}}
"""

    logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ GPT")
    thread = client.beta.threads.create()
    thread_id = thread.id
    logger.info(f"üßµ Thread —Å–æ–∑–¥–∞–Ω: {thread_id}")

    client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=message
    )

    run = client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID,
    )

    logger.info(f"‚ñ∂Ô∏è Assistant run –Ω–∞—á–∞—Ç: {run.id}")

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    while True:
        run_status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if run_status.status in ["completed", "failed", "cancelled", "expired"]:
            break

    if run_status.status != "completed":
        logger.warning(f"‚õî –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {run_status.status}")
        return {"analysis": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPT", "key_question": "", "field_comments": {}}

    messages = client.beta.threads.messages.list(thread_id=thread_id)
    content = ""

    for message in reversed(messages.data):
        if message.role == "assistant":
            if message.content and message.content[0].type == "text":
                content = message.content[0].text.value
                break

    logger.debug(f"üì¨ –û—Ç–≤–µ—Ç GPT: {content}")
    return try_extract_json(content)

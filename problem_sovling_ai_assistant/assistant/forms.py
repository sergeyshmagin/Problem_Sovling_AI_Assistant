from django import forms
from .models import ProblemCard
from .gpt_engine import ask_gpt_with_validation
import logging

logger = logging.getLogger(__name__)

class ProblemCardForm(forms.ModelForm):
    gpt_key_question = forms.CharField(
        required=False,
        label="üí° GPT –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∫–ª—é—á–µ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'readonly': True,
            'rows': 2,
        })
    )

    class Meta:
        model = ProblemCard
        fields = ['who', 'what', 'where', 'when', 'why_now', 'r1_as_is', 'r2_to_be', 'gap', 'problem_type']
        labels = {
            'who': '–ö—Ç–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É?',
            'what': '–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç (—Å—É—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏)?',
            'where': '–ì–¥–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è —Å–æ–±—ã—Ç–∏—è?',
            'when': '–ö–æ–≥–¥–∞ –∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö –ø–æ—è–≤–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞?',
            'why_now': '–ü–æ—á–µ–º—É –ø—Ä–æ–±–ª–µ–º–∞ —Å—Ç–∞–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å?',
            'r1_as_is': 'R1: –ö–∞–∫ –µ—Å—Ç—å (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)',
            'r2_to_be': 'R2: –ö–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å (–∂–µ–ª–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)',
            'gap': '–†–∞–∑—Ä—ã–≤ (gap) –º–µ–∂–¥—É R1 –∏ R2',
            'problem_type': '–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã',
        }
        widgets = {
            'who': forms.Textarea(attrs={'class': 'form-control', 'rows': 1, 'style': 'overflow:hidden; resize:none;'}),
            'what': forms.Textarea(attrs={'class': 'form-control', 'rows': 1, 'style': 'overflow:hidden; resize:none;'}),
            'where': forms.Textarea(attrs={'class': 'form-control', 'rows': 1, 'style': 'overflow:hidden; resize:none;'}),
            'when': forms.Textarea(attrs={'class': 'form-control', 'rows': 1, 'style': 'overflow:hidden; resize:none;'}),
            'why_now': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'style': 'overflow:hidden; resize:none;'}),
            'r1_as_is': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'style': 'overflow:hidden; resize:none;'}),
            'r2_to_be': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'style': 'overflow:hidden; resize:none;'}),
            'gap': forms.Textarea(attrs={'class': 'form-control', 'rows': 2, 'style': 'overflow:hidden; resize:none;'}),
            'problem_type': forms.Select(attrs={'class': 'form-select'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.field_comments = {}

    def clean(self):
        logger.debug("üßº –°—Ç–∞—Ä—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã ProblemCardForm")
        cleaned_data = super().clean()

        required_fields = ['who', 'what', 'where', 'when', 'why_now']
        forbidden_phrases = ['–Ω–µ –∑–Ω–∞—é', '–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ', '–≤—Å–µ –ø–ª–æ—Ö–æ', '–Ω–∏—á–µ–≥–æ', '–Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç', '–Ω–∏–∫–∞–∫', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö']

        for field in required_fields:
            value = cleaned_data.get(field, '').strip()
            if not value:
                self.add_error(field, "–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
            elif len(value) < 10:
                self.add_error(field, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤).")
            elif value.lower() in forbidden_phrases:
                self.add_error(field, "–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –æ–±—â–∞—è –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ.")

        if self.errors:
            return cleaned_data

        try:
            gpt_response = ask_gpt_with_validation(cleaned_data)
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ GPT")
            self.add_error(None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return cleaned_data

        cleaned_data['analysis'] = gpt_response.get("analysis", "")
        cleaned_data['gpt_key_question'] = gpt_response.get("key_question", "")
        self.field_comments = gpt_response.get("field_comments", {}) or {}

        for field, comment in self.field_comments.items():
            if comment.strip() and field in self.fields:
                self.fields[field].widget.attrs.update({
                    'class': self.fields[field].widget.attrs.get('class', '') + ' is-gpt-flagged',
                    'data-gpt-comment': comment
                })
                self.add_error(field, comment)

        if any(word in cleaned_data['analysis'].lower() for word in ["–Ω–µ—è—Å–Ω–æ", "—Ä–∞–∑–º—ã—Ç–æ", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ"]):
            self.add_error(None, f"GPT —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á—ë—Ç–∫–æ–µ:\n\n{cleaned_data['analysis']}")

        return cleaned_data
